plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id 'kotlin-parcelize'
    alias(libs.plugins.ksp)
    alias(libs.plugins.sqldelight)
    alias(libs.plugins.kotlin.serialization)
}

apply from: "../ktlint.gradle"

sqldelight {
    databases {
        Database {
            packageName = "com.meneses.budgethunter.db"
        }
    }
}

android {
    compileSdk 36

    defaultConfig {
        applicationId "com.meneses.budgethunter"
        minSdk 26
        targetSdk 36
        versionCode 2
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        def localProperties = new Properties()
        def localPropertiesFile = rootProject.file("local.properties")
        if (localPropertiesFile.exists()) {
            localProperties.load(new FileInputStream(localPropertiesFile))
        }

        def geminiApiKey = localProperties.getProperty("GEMINI_API_KEY")
        buildConfigField("String", "GEMINI_API_KEY", "\"${geminiApiKey}\"")
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    kotlin {
        jvmToolchain(17)
    }
    buildFeatures {
        compose true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'com.meneses.budgethunter'

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-Xmx1024m'
                maxHeapSize = "1024m"
                forkEvery = 1
                systemProperty 'junit.jupiter.execution.parallel.enabled', 'false'
            }
        }
    }

    applicationVariants.configureEach { variant ->
        kotlin.sourceSets {
            named(variant.name) {
                kotlin.srcDir("build/generated/ksp/${variant.name}/kotlin")
            }
        }
    }
}

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.bundles.compose
    implementation libs.bundles.androidx.lifecycle
    implementation libs.androidx.activity.compose
    implementation libs.bundles.sheets.compose
    implementation libs.bundles.sqldelight
    implementation libs.lottie.compose

    implementation libs.bundles.play.update

    implementation libs.androidx.navigation.compose
    implementation libs.kotlinx.serialization.json

    implementation libs.bundles.ktor

    implementation libs.google.ai.generativeai

    // DataStore
    implementation libs.bundles.datastore

    // Koin
    implementation libs.bundles.koin
    ksp libs.koin.ksp.compiler

    testImplementation libs.bundles.test.unit
    androidTestImplementation libs.bundles.test.android
    debugImplementation libs.bundles.test.debug
}